// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import { useAuth } from '@clerk/clerk-react';
import { useState, useEffect } from 'react';
import type { Database } from './types';

const SUPABASE_URL = "https://iycblctxyhfdetorspct.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Iml5Y2JsY3R4eWhmZGV0b3JzcGN0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDcyMzU1NDYsImV4cCI6MjA2MjgxMTU0Nn0.Q1gyvxhOrsc6zYyZvNw1e9Bcon-j3be-zUNJR2WrwQc";

// Direct client for public data or when auth is not required
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Hook for authenticated Supabase client with Clerk integration
export function useClerkSupabaseClient() {
  const { getToken, isLoaded, isSignedIn } = useAuth();
  const [client, setClient] = useState<ReturnType<typeof createClient<Database>> | null>(null);

  useEffect(() => {
    async function setupClient() {
      // If Clerk is loaded and user is signed in, use token
      if (isLoaded && isSignedIn) {
        try {
          const token = await getToken({ template: "supabase" });
          const supabaseClient = createClient<Database>(
            SUPABASE_URL,
            SUPABASE_PUBLISHABLE_KEY,
            {
              global: {
                headers: {
                  Authorization: `Bearer ${token}`,
                },
              },
            }
          );
          setClient(supabaseClient);
        } catch (error) {
          console.error("Error getting Clerk token for Supabase:", error);
          // Fallback to anonymous client
          setClient(supabase);
        }
      } else {
        // Otherwise, use the public client
        setClient(supabase);
      }
    }
    
    setupClient();
  }, [getToken, isLoaded, isSignedIn]);

  return client;
}
